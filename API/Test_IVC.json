{
	"info": {
		"_postman_id": "ea1afae0-0864-415b-8675-5865578e7efd",
		"name": "API V2",
		"description": "The Dog API provides a wealth of information on dog breeds, groups, and fun facts. Access and integrate this data into your website or application with our easy-to-use JSON API.\n\nContact Support:\n Email: dev@dogapi.dog",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "19750156"
	},
	"item": [
		{
			"name": "breeds",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "get breed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/breeds/{{BreedIds}}"
							},
							"response": [
								{
									"name": "successful",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/breeds/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"breeds",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						}
					]
				},
				{
					"name": "list breeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response",
									"const jsonData = pm.response.json();",
									"",
									"// Initialize arrays to store breed names and IDs",
									"const breedNames = [];",
									"const breedIds = [];",
									"",
									"// Loop through each breed in the data",
									"jsonData.data.forEach((breed) => {",
									"    breedNames.push(breed.attributes.name);",
									"    breedIds.push(breed.id);",
									"});",
									"",
									"// Set environment variables",
									"pm.environment.set('BreedNames', breedNames.join(', '));",
									"pm.environment.set('BreedIds', breedIds.join(', '));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{baseUrl}}/breeds"
					},
					"response": [
						{
							"name": "successful",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": "{{baseUrl}}/breeds"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "null"
						}
					]
				}
			]
		},
		{
			"name": "facts",
			"item": [
				{
					"name": "list facts",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/facts?limit=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"facts"
							],
							"query": [
								{
									"key": "limit",
									"value": "<integer>"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/facts?limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"facts"
									],
									"query": [
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "null"
						}
					]
				}
			]
		},
		{
			"name": "groups",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "get group",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": "{{baseUrl}}/groups/{{GroupIds}}"
							},
							"response": [
								{
									"name": "successful",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						}
					]
				},
				{
					"name": "list groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response",
									"const jsonData = pm.response.json();",
									"",
									"// Initialize arrays to store group names and IDs",
									"const groupNames = [];",
									"const groupIds = [];",
									"",
									"// Loop through each group in the data",
									"jsonData.data.forEach((group) => {",
									"    groupNames.push(group.attributes.name);",
									"    groupIds.push(group.id);",
									"});",
									"",
									"// Set environment variables",
									"pm.environment.set('GroupNames', groupNames[0]);",
									"pm.environment.set('GroupIds', groupIds[0]);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/vnd.api+json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.api+json\");",
									"});",
									"",
									"",
									"pm.test(\"Each group object has 'id', 'type', 'attributes', and 'relationships' properties\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    responseData.data.forEach(function(group) {",
									"        pm.expect(group).to.have.property('id');",
									"        pm.expect(group).to.have.property('type');",
									"        pm.expect(group).to.have.property('attributes');",
									"        pm.expect(group).to.have.property('relationships');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Each 'id' and 'type' within 'relationships' is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach((group) => {",
									"        pm.expect(group.relationships).to.exist;",
									"        ",
									"        group.relationships.breeds.data.forEach((breed) => {",
									"            pm.expect(breed.id).to.exist.and.to.not.be.empty;",
									"            pm.expect(breed.type).to.exist.and.to.not.be.empty;",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Each group object has 'relationships' with more than one value\", function () {",
									"    const responseData = pm.response.json().data;",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(group) {",
									"        pm.expect(group.relationships.breeds.data.length).to.be.above(1);",
									"    });",
									"});",
									"",
									"pm.test(\"Names are unique in the response\", function() {",
									"    var jsonData = pm.response.json().data; ",
									"",
									"    var nameList = jsonData.map(item => item.attributes.name); ",
									"    var uniqueNames = new Set(nameList);",
									"",
									"    pm.expect(uniqueNames.size).to.eql(nameList.length);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{baseUrl}}/groups"
					},
					"response": [
						{
							"name": "successful",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": "{{baseUrl}}/groups"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "null"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://dogapi.dog/api/v2"
		}
	]
}